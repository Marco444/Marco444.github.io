{"version":3,"sources":["visualiser/components/tutorial/Welcome.js","visualiser/model/utils.js","visualiser/model/animations/AnimationsEngine.js","visualiser/components/Canvas.js","visualiser/components/buttons/SortButton.js","visualiser/components/buttons/ShuffleButton.js","visualiser/components/buttons/FunctionsButtons.js","visualiser/components/radioBox/AlgorithmSelector.js","visualiser/components/sliders/SliderAnimationSpeed.js","visualiser/components/InformationBox.js","visualiser/model/algorithms/mergeSort.js","visualiser/model/algorithms/quickSort.js","visualiser/model/algorithms/SortingAlgorithm.js","visualiser/model/algorithms/radixSort.js","visualiser/model/algorithms/bubbleSort.js","visualiser/components/sliders/SliderNumberBars.js","App.js","visualiser/components/tutorial/FunctionButtonTutorial.js","visualiser/components/tutorial/AlgorithmSelectorExplanation.js","visualiser/components/tutorial/SlidersExplanation.js","visualiser/components/tutorial/InformationBoxExplanation.js","visualiser/components/tutorial/Tutorial.jsx","MainApp.js","index.js"],"names":["buttonStyle","color","backgroundColor","WelcomeGuide","display","close","width","height","startTutorial","widthBox","heightBox","Modal","open","onClose","Box","sx","marginLeft","marginTop","padding","Typography","fontSize","fontWeight","paddingTop","Stack","direction","Button","onClick","style","newShuffledArray","length","minValue","maxValue","min","max","array","i","push","Math","floor","random","SwapAnimation","current","next","auxWidth","begin","CopyAnimation","newWidth","this","defaultBarColor","sortedColor","AnimationType","duration","defaultColor","animate","AlgorithmSelection","SliderSelection","Sorted","Shuffle","Animation","type","j","apply","animateBarsWith","animation","animationsSet","getSortedAnimations","addSwapAnimation","setAnimations","addCopyAnimation","auxiliaryArray","Canvas","position","props","canvasWidth","marginRight","map","value","idx","className","barsHeight","Component","SortButton","isBusy","sortButtonClicked","disabled","bgcolor","paddingLeft","ShuffleButton","shuffleButtonClicked","FunctionsButtons","ButtonGroup","orientation","variant","AlgorithmSelector","stackWidth","mergeSortButtonClicked","bubbleSortButtonClicked","quickSortButtonClicked","radixSortButtonClicked","FormControl","component","RadioGroup","defaultValue","name","paddingBottom","id","alignItems","flexWrap","gutterBottom","FormControlLabel","control","Radio","label","onChange","SliderAnimationSpeed","maxSliderSpeedValue","minSliderSpeedValue","defaultSpeedValue","sliderWidth","handleSpeedSlider","Slider","marginBottom","InformationBox","algorithm","useState","slide","setSlide","useEffect","Slide","in","mountOnEnter","unmountOnExit","text","getMergeSortAnimations","animations","console","log","slice","mergeSort","concat","mainArray","left","right","middle","k","merge","getQuickSortAnimations","quickSort","p","pivot","aux","partition","SortingAlgorithm","link","radixSort","idx1","idx2","idx3","len1","radix","radixKey","curr","currLen","currBucket","radices","buckets","toString","hasOwnProperty","getRadixSortAnimations","bubbleSort","getBubbleSortAnimations","none","SliderNumberBars","maxNumberBars","minNumberBars","defaultNumberBars","handlerBarsNumberSlider","App","canvasHeight","stackHeight","functionButtonsHeight","stackLeftTopMargin","algorithmBoxHeight","slidersHeight","ANIMATION_SPEED_SLIDER_MAX","sortingAnimationSpeed","setSortingAnimationSpeed","animationSpeed","numberOfBars","setNumberOfBars","barsLength","setBusy","setArray","sortingAlgorithm","setSortingAlgorithm","defaultNumberOfBars","defaultAnimationSpeed","applyAnimations","getSelectedAnimations","getShuffleAnimations","getAlgorithmSelectionAnimation","speed","index","setTimeout","currentBars","document","getElementsByClassName","applyTo","m","bind","getAnimations","event","FunctionButtonTutorial","explanationBoxStyle","textStyleTutorial","buttonStyleTutorial","AlgorithmSelectorExplanation","SlidersExplanation","InformationBoxExplanation","margin","Tutorial","start","stackTopLeftMargin","setCurrent","tutorialSteps","prev","controllersLeftTopMargin","MainApp","useWindowSize","welcome","showWelcome","setStartTutorial","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.312e6dfc.chunk.js","sourcesContent":["import {Box, Modal, Stack, Typography} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst buttonStyle = {\n    color: '#fff',\n    '&:hover': {\n        backgroundColor: '#fff',\n        color: '#3c52b2',\n    },\n}\n\nexport const WelcomeGuide = ({display, close, width, height, startTutorial}) => {\n    const a = 1\n    const widthBox = width / 4\n    const heightBox = height / 4\n\n    return (\n        <Modal\n            open={display}\n            onClose={close}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\">\n            <Box sx={{\n                backgroundColor: 'rgba(0,43,162,0.98)',\n                width: widthBox,\n                height: heightBox,\n                marginLeft: width / 20 - widthBox / 50,\n                marginTop: height / 20 - heightBox / 50,\n                padding: 3,\n            }}>\n                <Typography sx={{\n                    fontSize: 40,\n                    color: 'white',\n                    fontWeight: 'bold',\n                }}>\n                    Welcome,\n                </Typography>\n                <Typography sx={{\n                    color: 'white',\n                    fontWeight: 'bold',\n                    paddingTop: 2\n                }}>\n                    This is a small app made in React designed to visualise sorting algorithms\n                </Typography>\n\n                <Stack direction='row' sx={{paddingTop: 7}}>\n                    <Button onClick={close} sx={buttonStyle}> CLOSE </Button>\n                    <Button onClick={startTutorial}\n                            sx={buttonStyle} style={{marginLeft: widthBox / 1.7}}> TUTORIAL</Button>\n                </Stack>\n\n            </Box>\n        </Modal>\n    );\n};","\nexport function newShuffledArray(length, minValue, maxValue) {\n    const array = [];\n    for (let i = 0; i <= length; i++) {\n        array.push(randomIntFromInterval(minValue, maxValue));\n    }\n    return array;\n}\n\nexport function randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function equalArrays(array1, array2) {\n    if (array1.length !== array2.length) return false;\n    for (let i = 0; i < array1.length; i++)\n        if (array1[i] !== array2[i])\n            return false;\n    return true;\n}\n","\nclass SwapAnimation {\n    static begin = new SwapAnimation();\n    static end;\n\n    apply(current, next) {\n        const auxWidth = next.style.width\n        next.style.width = current.style.width\n        current.style.width = auxWidth\n    }\n}\n\nexport class CopyAnimation {\n\n    constructor(newWidth) {\n        this.newWidth = newWidth\n    }\n\n    apply(current) {\n        current.style.width = `${this.newWidth}px`\n    }\n}\n\n\nconst defaultBarColor = \"#47118f\"\nconst algorithmSelectedColor = \"#ffb4a1\"\nconst selectedColor = \"#21e892\"\nconst sortedColor = \"#e73068\"\n\nexport class AnimationType {\n\n    static AlgorithmSelection = new AnimationType(800, algorithmSelectedColor, defaultBarColor)\n    static SliderSelection = new AnimationType(800, selectedColor, defaultBarColor)\n    static Sorted = new AnimationType(800, sortedColor, defaultBarColor)\n    static Shuffle = new AnimationType(800, sortedColor, defaultBarColor)\n\n    constructor(duration, color, defaultColor) {\n        this.duration = duration\n        this.color = color\n        this.defaultColor = defaultColor\n    }\n\n\n    apply(current, next) {\n        current.animate(\n            {backgroundColor: [this.color, this.defaultColor]}\n            , this.duration)\n\n        next.animate(\n            {backgroundColor: [this.color, this.defaultColor]}\n            , this.duration)\n    }\n}\n\nexport class Animation {\n\n    constructor(type, i, j) {\n        this.type = type;\n        this.i = i;\n        this.j = j;\n    }\n\n    applyTo(array) {\n        this.type.apply(array[this.i], array[this.j])\n    }\n\n}\n\n\nfunction animateBarsWith(array, animation) {\n    let animationsSet = []\n\n    for(let i = 0; i < array.length; i++)\n        animationsSet.push(new Animation(animation, i, i))\n\n    return animationsSet\n}\n\nexport function getSortedAnimations(array) {\n   return animateBarsWith(array, AnimationType.Sorted)\n}\n\nexport function getShuffleAnimations(array) {\n  return animateBarsWith(array, AnimationType.Shuffle)\n}\n\nexport function getSelectedAnimations(array) {\n   return animateBarsWith(array, AnimationType.SliderSelection)\n}\n\nexport function getAlgorithmSelectionAnimation(array) {\n    return animateBarsWith(array, AnimationType.AlgorithmSelection)\n}\n\nexport function addSwapAnimation(i, j, setAnimations) {\n    setAnimations.push(new Animation(AnimationType.SliderSelection, i, j))\n    setAnimations.push(new Animation(SwapAnimation.begin, i, j))\n}\n\nexport function addCopyAnimation(i, j, setAnimations, auxiliaryArray) {\n    setAnimations.push(new Animation(AnimationType.SliderSelection, i, j))\n    setAnimations.push(new Animation(new CopyAnimation(auxiliaryArray[i]), j))\n}\n","import React, {Component} from \"react\";\nimport {Box} from \"@mui/material\";\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#47118f';\nconst CANVAS_COLOR = '#ffc5b6'\n\n\nexport default class Canvas extends Component {\n\n    render() {\n        return (\n            <Box sx={{\n                position: 'relative',\n                height: this.props.height / 1.1,\n                width: this.props.canvasWidth, //canvasWidth has to do with max length bars\n                backgroundColor: CANVAS_COLOR,\n                marginLeft: 2,\n                marginRight: 2\n            }}>\n                {this.props.array.map((value, idx) => (\n                    <div key={idx} className=\"arrayBar\" style={{\n                        width: `${value}px`,\n                        height: `${this.props.barsHeight}px`,\n                        backgroundColor: PRIMARY_COLOR\n                    }}> </div>\n                ))}\n            </Box>\n        );\n    }\n}\n","import PlayCircleOutlineRoundedIcon from \"@mui/icons-material/PlayCircleOutlineRounded\";\nimport Button from \"@mui/material/Button\";\nimport React from \"react\";\n\nexport const SortButton = ({isBusy, sortButtonClicked, height}) => {\n   return (\n       <Button key=\"one\" disabled={isBusy}\n               sx={{\n                   bgcolor: '#234ebe',\n                   color: 'white',\n                   fontWeight: 'bold',\n                   paddingLeft: 2,\n                   paddingTop: 1,\n                   height: height\n               }} onClick={sortButtonClicked}> SORT\n           <PlayCircleOutlineRoundedIcon sx={{paddingLeft: 1}}/>\n       </Button>\n   );\n}","import Button from \"@mui/material/Button\";\nimport ShuffleOnRoundedIcon from \"@mui/icons-material/ShuffleOnRounded\";\nimport React from \"react\";\n\nexport const ShuffleButton = ({isBusy, shuffleButtonClicked, height}) => {\n    return (\n        <Button key=\"two\" disabled={isBusy}\n                sx={{\n                    bgcolor: '#ff518a',\n                    color: 'white',\n                    fontWeight: 'bold',\n                    paddingLeft: 2,\n                    paddingTop: 1,\n                    height: height\n                }} onClick={shuffleButtonClicked}> SHUFFLE\n            <ShuffleOnRoundedIcon sx={{paddingLeft: 1}} />\n        </Button>\n    );\n}","import {SortButton} from \"./SortButton\";\nimport {ShuffleButton} from \"./ShuffleButton\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\nimport React from \"react\";\nimport {Box, Modal, Slide} from \"@mui/material\";\n\nexport const FunctionsButtons = ({isBusy, sortButtonClicked, shuffleButtonClicked, height}) => {\n\n    return (\n        <ButtonGroup\n            orientation=\"vertical\"\n            aria-label=\"vertical contained button group\"\n            variant=\"contained\" sx={{height: height}}>\n            <SortButton height={height / 2} isBusy={isBusy} sortButtonClicked={sortButtonClicked}/>\n            <ShuffleButton height={height / 2} isBusy={isBusy} shuffleButtonClicked={shuffleButtonClicked}/>\n        </ButtonGroup>\n    );\n}","import {FormControl, FormControlLabel, Radio, RadioGroup, Stack, Typography} from \"@mui/material\";\nimport SortRoundedIcon from \"@mui/icons-material/SortRounded\";\nimport React from \"react\";\n\nexport const AlgorithmSelector = ({stackWidth, mergeSortButtonClicked, bubbleSortButtonClicked,\n                                  isBusy, quickSortButtonClicked, radixSortButtonClicked}) => {\n    return (\n\n        <FormControl sx={{\n            marginTop: 1,\n            fontWeight: 'bold',\n            color: 'white',\n            width: stackWidth,\n        }} component=\"fieldset\">\n\n            <RadioGroup\n                aria-label=\"gender\"\n                defaultValue=\"female\"\n                name=\"radio-controllers-group\"\n                sx={{\n                    bgcolor: '#ffb4a1',\n                    color: 'white',\n                    paddingLeft: 2,\n                    paddingTop: 2,\n                    paddingBottom: 2,\n                    fontWeight: 'bold',\n                }}>\n                <Typography id=\"animation-slider\" sx={{\n                    fontWeight: 'bold',\n                    display: 'flex',\n                    alignItems: 'center',\n                    flexWrap: 'wrap',\n                }} gutterBottom> Algorithms\n                    <SortRoundedIcon sx={{paddingLeft: 1}}/>\n                </Typography>\n                <Stack sx={{fontWeight: 'bold'}}>\n                    <FormControlLabel value=\"insertionSort\" control={<Radio/>} label=\"Merge Sort\"\n                                      onChange={mergeSortButtonClicked} disabled={isBusy} />\n\n                    <FormControlLabel value=\"mergeSort\" control={<Radio/>}  label=\"Bubble Sort\"\n                                      onChange={bubbleSortButtonClicked} disabled={isBusy}/>\n\n                    <FormControlLabel value=\"quickSort\" control={<Radio/>} label=\"Quick Sort\"\n                                      onChange={quickSortButtonClicked} disabled={isBusy}/>\n\n                    <FormControlLabel value=\"radixSort\" control={<Radio/>} label=\"Radix Sort\"\n                                      onChange={radixSortButtonClicked} disabled={isBusy}/>\n                </Stack>\n            </RadioGroup>\n        </FormControl>\n\n\n    );\n}","import {Slider, Stack, Typography} from \"@mui/material\";\nimport SpeedRoundedIcon from \"@mui/icons-material/SpeedRounded\";\nimport React from \"react\";\n\nexport const SliderAnimationSpeed = ({maxSliderSpeedValue, minSliderSpeedValue, defaultSpeedValue,\n                                         sliderWidth, handleSpeedSlider, isBusy, height, marginTop}) => {\n    return (\n        <Stack sx={{\n            backgroundColor: 'rgba(57,92,183,0.98)',\n            marginTop: 1,\n            color: \"white\",\n        }}>\n            <Stack>\n                <Typography id=\"animation-slider\" sx={{\n                    paddingTop: 2,\n                    paddingLeft: 2,\n                    fontWeight: 'bold',\n                    display: 'flex',\n                    alignItems: 'center',\n                    flexWrap: 'wrap',\n                }}> Animation Speed\n                    <SpeedRoundedIcon sx={{paddingLeft: 1}}/>\n                </Typography>\n            </Stack>\n            <Slider max={maxSliderSpeedValue} min={minSliderSpeedValue}\n                    defaultValue={defaultSpeedValue} key={1} sx={{\n                marginLeft: 2,\n                marginBottom: 2,\n                width: sliderWidth * 0.825\n            }} onChange={handleSpeedSlider} disabled={isBusy}/>\n        </Stack>\n    );\n}","import {Box, Slide, Stack, Typography} from \"@mui/material\";\nimport React, {useEffect, useState} from \"react\";\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\n\n\nexport const InformationBox = ({algorithm, width}) => {\n\n    const [slide, setSlide] = useState(false)\n\n    useEffect(() => {\n        setSlide(true)\n    }, [algorithm])\n\n\n\n    return (\n        <Slide direction=\"up\" in={slide} mountOnEnter unmountOnExit>\n            <Stack sx={{\n                width: width,\n                backgroundColor:  \"#ff8181\",\n                marginTop: 1,\n                color: \"white\"\n            }}>\n                <Box id=\"infog\" sx={{\n                    fontWeight: 'bold',\n                    display: 'flex',\n                    alignItems: 'center',\n                    flexWrap: 'wrap',\n                    padding: 1,\n                    paddingLeft: 1,\n                    paddingBottom: 0\n                }} gutterBottom> Information\n                    <HelpOutlineIcon sx={{paddingLeft: 1}} />\n\n                </Box>\n\n                <Typography sx={{padding: 1}}> {algorithm.text}  </Typography>\n            </Stack>\n        </Slide>\n    );\n}","import {addCopyAnimation} from \"../animations/AnimationsEngine\"\nimport {getSortedAnimations} from \"../animations/AnimationsEngine\";\n\nexport default function getMergeSortAnimations(array) {\n    const animations = [];\n    console.log('merge sort animations')\n\n    if (array.length <= 1) return array;\n\n    const auxiliaryArray = array.slice();\n\n    mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n\n    return animations.concat(getSortedAnimations(array));\n}\n\nfunction mergeSort(mainArray, left, right, auxiliaryArray, animations,) {\n    if (left === right) return;\n    const middle = Math.floor((left + right) / 2);\n    mergeSort(auxiliaryArray, left, middle, mainArray, animations);\n    mergeSort(auxiliaryArray, middle + 1, right, mainArray, animations);\n    merge(mainArray, left, middle, right, auxiliaryArray, animations);\n}\n\nfunction merge(mainArray, left, middle, right, auxiliaryArray, animations) {\n    let k = left;\n    let i = left;\n    let j = middle + 1;\n\n\n    while (i <= middle && j <= right) {\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n\n            addCopyAnimation(i, k, animations, auxiliaryArray)\n            mainArray[k++] = auxiliaryArray[i++];\n\n        } else {\n            addCopyAnimation(j, k, animations, auxiliaryArray)\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n\n    while (i <= middle) {\n        addCopyAnimation(i, k, animations, auxiliaryArray)\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n\n    while (j <= right) {\n        addCopyAnimation(j, k, animations, auxiliaryArray)\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n\n\n\n}\n","import {addSwapAnimation} from \"../animations/AnimationsEngine\";\nimport {getSortedAnimations} from \"../animations/AnimationsEngine\";\n\nexport default function getQuickSortAnimations(array){\n    let animations = []\n\n    quickSort(animations, array, 0, array.length - 1)\n\n    return animations.concat(getSortedAnimations(array))\n}\n\nfunction quickSort(animations, array, left, right){\n    if(left < right){\n        let p = partition(animations, array, left, right)\n        quickSort(animations, array, left, p - 1)\n        quickSort(animations, array, p + 1, right)\n    }\n}\n\nfunction partition(animations, array, left, right) {\n\n    let pivot = array[right]\n    let i = left - 1\n\n    for(let j = left; j <= right - 1; j++) {\n        if(array[j] < pivot){\n            i++;\n\n            addSwapAnimation(i, j, animations)\n\n            let aux = array[i]\n            array[i] = array[j]\n            array[j] = aux\n        }\n    }\n\n    addSwapAnimation(i + 1, right, animations)\n\n    let aux = array[i + 1]\n    array[i + 1] = array[right]\n    array[right] = aux\n\n\n    return i + 1\n}\n\n","import getMergeSortAnimations from \"./mergeSort\";\nimport getQuickSortAnimations from \"./quickSort\";\nimport getRadixSortAnimations from \"./radixSort\";\nimport getBubbleSortAnimations from \"./bubbleSort\";\n\nconst bubbleSortInfo =\n    `   Bubble sort works by traversing all the elements the amount of\n        times being equal to the number of elements, and\n        whenever two adyacent elements can be shifted in the\n        correct order, they are shifted. O(n^2) time complexity `\n\nconst mergeSortInfo =\n   `    Merge Sort works by recursively dividing the list of elements in half\n    until it can't anymore. Then it merges all the subarrays in the corresponding\n     order until we dont have more subarrays to merge. O(n*logn) time complexity`\n\nconst radixSortInfo =\n    `   It works by decomposing each element in digits and for every digit ordering\n     the elements upon it (without loosing order from previous digits). It is different\n      from the others as it doesn't soley compare elements when ordering them. As a result\n       it manages to have time complexity O(n) provided the range of numbers isnt crazy high (polynomial)`\n\nconst quickSortInfo =\n  `     It works by recursively partitioning the list of elements based upon a pivot element and then sorting\n       each subarray recursively by putting the pivot in the correct order. O(n*logn) time complexity `\n\nconst bubbleSortLink =  'https://en.wikipedia.org/wiki/Bubble_sort'\n\nexport class SortingAlgorithm {\n\n    static mergeSort = new SortingAlgorithm(mergeSortInfo, (array) => getMergeSortAnimations(array))\n    static quickSort = new SortingAlgorithm(quickSortInfo, (array) => getQuickSortAnimations(array))\n    static radixSort = new SortingAlgorithm(radixSortInfo, (array) => getRadixSortAnimations(array))\n    static bubbleSort = new SortingAlgorithm(bubbleSortInfo, (array) => getBubbleSortAnimations(array), bubbleSortLink)\n    static none = new SortingAlgorithm(\"\", () => ([]), '')\n\n    constructor(text, animations, link) {\n        this.text = text\n        this.animations = animations\n        this.link = link\n    }\n\n    getAnimations(array) {\n        return this.animations(array)\n    }\n\n}","import {\n    addCopyAnimation,\n    Animation,\n    AnimationType,\n    CopyAnimation,\n    getSortedAnimations\n} from \"../animations/AnimationsEngine\";\n\nexport default function getRadixSortAnimations(array) {\n    let animations = []\n\n    let idx1, idx2, idx3, len1, len2, radix, radixKey;\n    let radices = {}, buckets = {}, num, curr;\n    let currLen, radixStr, currBucket;\n\n    len1 = array.length;\n    len2 = 10;  // radix sort uses ten buckets\n\n    // find the relevant radices to process for efficiency\n    for (idx1 = 0;idx1 < len1;idx1++) {\n        radices[array[idx1].toString().length] = 0;\n    }\n\n    // loop for each radix. For each radix we put all the items\n    // in buckets, and then pull them out of the buckets.\n    for (radix in radices) {\n        // put each array item in a bucket based on its radix value\n        len1 = array.length;\n        for (idx1 = 0;idx1 < len1;idx1++) {\n            curr = array[idx1];\n            // item length is used to find its current radix value\n            currLen = curr.toString().length;\n            // only put the item in a radix bucket if the item\n            // key is as long as the radix\n            if (currLen >= radix) {\n                // radix starts from beginning of key, so need to\n                // adjust to get redix values from start of stringified key\n                radixKey = curr.toString()[currLen - radix];\n                // create the bucket if it does not already exist\n                if (!buckets.hasOwnProperty(radixKey)) {\n                    buckets[radixKey] = [];\n                }\n                // put the array value in the bucket\n                buckets[radixKey].push(curr);\n            } else {\n                if (!buckets.hasOwnProperty('0')) {\n                    buckets['0'] = [];\n                }\n                buckets['0'].push(curr);\n            }\n        }\n\n        // for current radix, items are in buckets, now put them\n        // back in the array based on their buckets\n        // this index moves us through the array as we insert items\n        idx1 = 0;\n\n        // go through all the buckets\n        for (idx2 = 0;idx2 < len2;idx2++) {\n            // only process buckets with items\n            if (buckets[idx2] != null) {\n                currBucket = buckets[idx2];\n                // insert all bucket items into array\n                len1 = currBucket.length;\n                for (idx3 = 0;idx3 < len1;idx3++) {\n                    animations.push(new Animation(AnimationType.SliderSelection, idx1, idx1))\n                    animations.push(new Animation(new CopyAnimation(currBucket[idx3]), idx1))\n                    array[idx1++] = currBucket[idx3];\n                }\n            }\n        }\n        buckets = {};\n    }\n    \n    return animations.concat(...getSortedAnimations(array))\n}","import {addSwapAnimation, getSortedAnimations,} from \"../animations/AnimationsEngine\";\n\nexport default function getBubbleSortAnimations(array) {\n    let setAnimations = []\n\n    if (array.length === 0) return setAnimations;\n\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array.length; j++) {\n            if (array[j] > array[j + 1]) {\n\n                addSwapAnimation(j, j + 1, setAnimations)\n\n                //SWAP ELEMENTS\n                const aux = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = aux;\n            }\n        }\n\n    }\n\n\n    return setAnimations.concat(getSortedAnimations(array))\n}\n","import {Box, Slider, Stack} from \"@mui/material\";\nimport FormatLineSpacingIcon from \"@mui/icons-material/FormatLineSpacing\";\nimport React from \"react\";\n\nexport const SliderNumberBars = ({maxNumberBars, minNumberBars, defaultNumberBars,\n                                 sliderWidth, isBusy, handlerBarsNumberSlider}) => {\n   return (\n       <Stack sx={{\n           backgroundColor: 'rgba(57,92,183,0.98)',\n           marginTop: 1,\n           color: \"white\"\n       }}>\n           <Box id=\"bars-slider\" sx={{\n               paddingTop: 2,\n               paddingLeft: 2,\n               display: 'flex',\n               alignItems: 'center',\n               flexWrap: 'wrap',\n               fontWeight: 'bold',\n           }} gutterBottom> Number of bars\n               <FormatLineSpacingIcon sx={{paddingLeft: 1}} />\n           </Box>\n           <Slider max={maxNumberBars} min={minNumberBars}\n                   defaultValue={defaultNumberBars} id=\"sliderBars\" sx={{\n               marginLeft: 2,\n               marginBottom: 2,\n               width: sliderWidth * 0.825\n           }} onChange={handlerBarsNumberSlider} disabled={isBusy}/>\n       </Stack>\n   );\n}","import {newShuffledArray} from \"./visualiser/model/utils\";\nimport {\n    getAlgorithmSelectionAnimation,\n    getSelectedAnimations,\n    getShuffleAnimations\n} from \"./visualiser/model/animations/AnimationsEngine\";\n\nimport React, {useEffect, useState} from \"react\";\nimport {Stack} from \"@mui/material\";\nimport SortingVisualiser from \"./visualiser/components/Canvas\";\nimport {FunctionsButtons} from \"./visualiser/components/buttons/FunctionsButtons\";\nimport {AlgorithmSelector} from \"./visualiser/components/radioBox/AlgorithmSelector\";\nimport {SliderAnimationSpeed} from \"./visualiser/components/sliders/SliderAnimationSpeed\";\nimport {InformationBox} from \"./visualiser/components/InformationBox\";\nimport {SortingAlgorithm} from \"./visualiser/model/algorithms/SortingAlgorithm\";\nimport {SliderNumberBars} from \"./visualiser/components/sliders/SliderNumberBars\";\n\n\nexport const App = ({canvasHeight, canvasWidth, stackWidth, stackHeight, width, height, stackLeftTopMargin,\n                    functionButtonsHeight, algorithmBoxHeight, slidersHeight}) => {\n\n    const ANIMATION_SPEED_SLIDER_MAX = 200;\n    const animationSpeed = 1\n    const barsHeight = animationSpeed * 2\n\n    const [sortingAnimationSpeed, setSortingAnimationSpeed] = useState(ANIMATION_SPEED_SLIDER_MAX * 0.25)\n    const [numberOfBars, setNumberOfBars] = useState(canvasHeight * 0.75 / barsHeight)\n    const barsLength = canvasWidth * 0.75\n\n    const [isBusy, setBusy] = useState(false)\n    const [array, setArray] = useState(newShuffledArray(numberOfBars, 0, barsLength))\n    const [sortingAlgorithm, setSortingAlgorithm] = useState(SortingAlgorithm.none)\n\n    const defaultNumberOfBars = numberOfBars\n    const defaultAnimationSpeed = sortingAnimationSpeed\n\n\n    const sortButtonClicked = () => {\n        setTimeout( () => {\n            if(sortingAlgorithm !== SortingAlgorithm.none)\n                setBusy(true)\n            applyAnimations(sortingAlgorithm.getAnimations(array), sortingAnimationSpeed)\n        }, 100)\n    }\n\n    const shuffleButtonClicked = () => {\n        setArray(newShuffledArray(numberOfBars, 0, barsLength))\n        setBusy(true)\n    }\n\n    const handleSpeedSlider = (event, value) => {\n        setBusy(true)\n        setSortingAnimationSpeed(() => ANIMATION_SPEED_SLIDER_MAX - value + 1)\n    }\n\n    const handleBarsNumberSlider = (event, value) => {\n        setNumberOfBars(value)\n        setBusy(true)\n        setArray(newShuffledArray(value, 0, barsLength))\n    }\n\n    useEffect(() => applyAnimations(getSelectedAnimations(array), animationSpeed), [numberOfBars, sortingAnimationSpeed])\n    useEffect(() => applyAnimations(getShuffleAnimations(array), animationSpeed), [array])\n    useEffect(() => applyAnimations(getAlgorithmSelectionAnimation(array), animationSpeed), [sortingAlgorithm])\n\n    const applyAnimations = (animations, speed) => {\n\n        for (let index = 0; index < animations.length; index++) {\n            setTimeout(() => {\n                let currentBars = document.getElementsByClassName('arrayBar');\n                animations[index].applyTo(currentBars)\n                if (index === animations.length - 1) setBusy(false)\n            }, index * speed);\n        }\n    }\n\n    return (\n        <Stack direction=\"row\"\n               sx={{\n                   display: 'flex',\n                   '& > *': {\n                       m: 2,\n                   }\n               }}>\n\n            <Stack sx={{\n                marginRight: 1,\n                width: stackWidth,\n                height: stackHeight\n            }}>\n\n                <FunctionsButtons isBusy={isBusy} shuffleButtonClicked={shuffleButtonClicked.bind(this)}\n                                  sortButtonClicked={sortButtonClicked.bind(this)} height={functionButtonsHeight}/>\n\n                <AlgorithmSelector isBusy={isBusy} stackWidth={stackWidth} height={algorithmBoxHeight}\n                                   bubbleSortButtonClicked={() => {setSortingAlgorithm(SortingAlgorithm.bubbleSort); setBusy(true)}}\n                                   radixSortButtonClicked={() => {setSortingAlgorithm(SortingAlgorithm.radixSort); setBusy(true)}}\n                                   mergeSortButtonClicked={() => {setSortingAlgorithm(SortingAlgorithm.mergeSort); setBusy(true)}}\n                                   quickSortButtonClicked={() => {setSortingAlgorithm(SortingAlgorithm.quickSort); setBusy(true)}}/>\n\n                <SliderAnimationSpeed isBusy={isBusy} sliderWidth={stackWidth}\n                                      handleSpeedSlider={handleSpeedSlider.bind(this)}\n                                      maxSliderSpeedValue={ANIMATION_SPEED_SLIDER_MAX}\n                                      minSliderSpeedValue={ANIMATION_SPEED_SLIDER_MAX / 2}\n                                      defaultSpeedValue={ANIMATION_SPEED_SLIDER_MAX - defaultAnimationSpeed}\n                                      height={slidersHeight} marginTop={functionButtonsHeight + algorithmBoxHeight}/>\n\n                <SliderNumberBars isBusy={isBusy} sliderWidth={stackWidth}\n                                  handlerBarsNumberSlider={handleBarsNumberSlider.bind(this)}\n                                  maxNumberBars={canvasHeight / barsHeight}\n                                  minNumberBars={canvasHeight * 0.5 / barsHeight}\n                                  defaultNumberBars={defaultNumberOfBars}/>\n\n\n                <InformationBox algorithm={sortingAlgorithm} width={stackWidth}/>\n\n            </Stack>\n\n            <SortingVisualiser barsHeight={barsHeight} array={array}\n                               width={width} height={height} canvasWidth={canvasWidth}/>\n        </Stack>\n\n    );\n}","import {Box, Modal, Slide, Stack, Typography} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport {buttonStyleTutorial, explanationBoxStyle, textStyleTutorial} from \"./Tutorial\";\n\n\nexport const FunctionButtonTutorial = ({display, close}) => {\n    return (\n        <Modal\n            open={display}\n            onClose={close}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\">\n            <Stack direction=\"row\" style={explanationBoxStyle}\n                   sx={{marginTop: 2}}>\n                <Typography sx={textStyleTutorial}>These are the controllers to either shuffle all the bars or sort them\n                    given an algorithm\n                </Typography>\n                <Button sx={buttonStyleTutorial}  onClick={close}> NEXT </Button>\n            </Stack>\n        </Modal>\n    )\n}","import {Box, Modal, Stack, Typography} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport {buttonStyleTutorial, explanationBoxStyle, textStyleTutorial} from \"./Tutorial\";\n\nexport const AlgorithmSelectorExplanation = ({display, close, padding, height, marginTop}) => {\n    return (\n        <Modal\n            open={display}\n            onClose={close}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\">\n            <Stack direction=\"row\" style={explanationBoxStyle}\n                   sx={{\n                       marginTop: marginTop / 4.5,\n                   }}>\n                <Typography sx={textStyleTutorial}> Here one selects the algorithm that will be used to sort the bars (sorting done in\n                    ascending order)\n                </Typography>\n                <Button sx={buttonStyleTutorial}  onClick={close}> NEXT </Button>\n            </Stack>\n        </Modal>\n    )\n}","import {Modal, Stack, Typography} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport {buttonStyleTutorial, explanationBoxStyle, textStyleTutorial} from \"./Tutorial\";\n\nexport const SlidersExplanation = ({display, close, padding, height, marginTop}) => {\n    return (\n        <Modal\n            open={display}\n            onClose={close}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\">\n            <Stack direction=\"row\" style={explanationBoxStyle}\n                   sx={{\n                       marginTop: marginTop / 7\n                   }}>\n                <Typography sx={textStyleTutorial}>\n                    These are the sliders to either control the animation speed or the number\n                    of bars (bubble sort reccommended fewest bars greatest speed)\n                </Typography>\n                <Button sx={buttonStyleTutorial}  onClick={close}> NEXT </Button>\n            </Stack>\n        </Modal>\n    )\n}\n","import {Modal, Stack, Typography} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport {buttonStyleTutorial, explanationBoxStyle, textStyleTutorial} from \"./Tutorial\";\n\nexport const InformationBoxExplanation = ({display, close, padding, height, marginTop}) => {\n    return (\n\n        <Modal\n            open={display}\n            onClose={close}\n            aria-labelledby=\"modal-modal-title\"\n            aria-describedby=\"modal-modal-description\">\n            <Stack direction=\"row\" style={explanationBoxStyle}\n                   sx={{\n                       marginTop: marginTop / 1.9\n                   }}>\n                <Typography sx={textStyleTutorial}>\n                    Here we have a small explanation of how the algorithm works, as well\n                    its average time complexity\n                </Typography>\n                <Button sx={buttonStyleTutorial}  onClick={close}> LET'S PLAY </Button>\n            </Stack>\n        </Modal>\n    )\n}\n","import React, {useEffect, useState} from \"react\";\nimport {FunctionButtonTutorial} from \"./FunctionButtonTutorial\";\nimport {AlgorithmSelectorExplanation} from \"./AlgorithmSelectorExplanation\";\nimport {SlidersExplanation} from \"./SlidersExplanation\";\nimport {InformationBoxExplanation} from \"./InformationBoxExplanation\";\n\n\nexport const buttonStyleTutorial = {\n    color: '#fff',\n    margin: 2,\n    '&:hover': {\n        backgroundColor: '#fff',\n        color: '#f38d8d',\n    },\n}\n\nexport const textStyleTutorial = {\n    padding: 2,\n    color: \"white\",\n    fontWeight: \"bold\"\n}\n\nexport const explanationBoxStyle = {\n    backgroundColor: \"#ff8181\",\n    width: 470,\n    \"margin-left\": 280\n}\n\nexport const Tutorial = ({start, stackWidth, functionButtonsHeight, stackTopLeftMargin}) => {\n\n    const [current, setCurrent] = useState(0);\n    const tutorialSteps = ['none', 'functionButtons', 'algorithmButtons', 'slidersButtons', 'informationBox']\n\n    useEffect(() => {\n        setCurrent(start ? 1 : 0)\n    }, [start])\n\n    const next = () => {\n        setCurrent(prev => prev + 1)\n    }\n\n    return (\n        <>\n            <FunctionButtonTutorial close={next} display={tutorialSteps[current] === 'functionButtons'}\n                                    padding={stackWidth}\n                                    height={functionButtonsHeight} controllersLeftTopMargin={stackTopLeftMargin}/>\n\n            <AlgorithmSelectorExplanation height={functionButtonsHeight * 3} marginTop={functionButtonsHeight}\n                                          display={tutorialSteps[current] === 'algorithmButtons'}\n                                          padding={stackWidth} close={next}/>\n\n            <SlidersExplanation close={next} display={tutorialSteps[current] === 'slidersButtons'}\n                                paddingLeft={stackWidth}\n                                height={functionButtonsHeight} marginTop={functionButtonsHeight * 5}/>\n\n            <InformationBoxExplanation height={functionButtonsHeight}\n                                       display={tutorialSteps[current] === \"informationBox\"} close={next}\n                                       padding={stackWidth} marginTop={functionButtonsHeight * 2}/>\n        </>\n    );\n}","import {useWindowSize} from \"react-use\";\nimport {useState} from \"react\";\nimport {WelcomeGuide} from \"./visualiser/components/tutorial/Welcome\";\nimport {App} from \"./App\";\nimport {Tutorial} from \"./visualiser/components/tutorial/Tutorial\";\n\n/**\n * This component is centered mainly on managing the UI dimensions positions of the elements\n * (it separates this functionality so that App, which actually provides functionality\n * is not cluttered with all this information)\n **/\n\nexport const MainApp = () => {\n    const {height, width} = useWindowSize();\n\n    /////Tutorial\n    const [welcome, showWelcome] = useState(true);\n    const [startTutorial, setStartTutorial] = useState(false)\n\n\n    /////Dimensions\n    const stackWidth = width * 0.15\n    const functionButtonsHeight = 65\n\n    return (\n        <>\n            <WelcomeGuide startTutorial={() => {\n                setStartTutorial(true);\n                showWelcome(false)\n            }}\n                          close={() => showWelcome(() => false)}\n                          display={welcome} width={width} height={height}/>\n\n            <Tutorial start={startTutorial}\n                      stackWidth={stackWidth} functionButtonsHeight={functionButtonsHeight}/>\n\n            <App width={width} height={height} canvasHeight={height * 0.8} canvasWidth={width * 0.8}\n                 stackWidth={stackWidth} stackHeight={height * 0.8}\n                 functionButtonsHeight={functionButtonsHeight}/>\n        </>\n    )\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './others/index.css';\nimport {MainApp} from './MainApp';\n\nReactDOM.render(\n  <React.StrictMode>\n      <MainApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}